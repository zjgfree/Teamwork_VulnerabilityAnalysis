import time
from alive_progress import alive_bar
from multiprocessing import Pool
from config import SLICE_DEBUG, SLICE_ALL
from config import db_path, sr_path
from data_module.db_access import *
from .slice_func import get_all_slice_result

def compute_slice_result(proj, fid_set):
    node_dict = load_from_pickle(f"{db_path}/{proj}/node_dict.db")
    graph_dict = load_from_pickle(f"{db_path}/{proj}/graph_dict.db")
    callin_dict = load_from_pickle(f"{db_path}/{proj}/callin_dict.db")
    
    slice_result_dict = {
        fid: get_all_slice_result(
            fid,
            node_dict,
            graph_dict,
            callin_dict,
        )
        for fid in fid_set
    }
    dump_to_pickle(slice_result_dict, f"{sr_path}/{proj}/all_slice_result_dict.db")
    # 在输出的地方加上新增的sink类型
    for tp in ("FR","NPD","PT","DZ","AS","FC", "AU", "PU", "AE", "ALL"):
        if not SLICE_ALL and tp == "ALL":
            continue

        slice_result = {}
        for fid in slice_result_dict:                   # 函数头id{id:{src:[[],[]],src:[[],[]]}}
            slice_result[fid] = {}
            for src in graph_dict[fid].src_dict[tp]:            # 关注点 相关的每个节点id
                slice_result_list = slice_result_dict[fid][src]
#                slice_result[fid][src] = [
#                    [node_dict[src]["code"]]
#                ]
                # print(slice_result_list)
                
                slice_result[fid][src] = [
                    [node_dict[t[0]]["code"] for t in slice_result if t[1]] # 提取的代码一定是节点上的代码，且是节点内的全部代码
                    for slice_result in slice_result_list
                ]
        dump_to_json(slice_result, f"{sr_path}/{proj}/slice_result_{tp}.json")
    if SLICE_DEBUG:
        dump_to_json(slice_result_dict, f"{sr_path}/{proj}/slice_result_dict.json")


def compute():
    start = time.perf_counter()
    print("Computing program slice...")
    proj_dict = load_from_pickle(f"{db_path}/proj_dict.db")
    # print("\n\n\n\n\n\n\n\n\n\n")
    # print(proj_dict)    # 试验
    # print("\n\n\n\n\n\n\n\n\n\n")
    with alive_bar(len(proj_dict)) as bar:
        bar.title = f"{'Computing program slice':^30}"
        if SLICE_DEBUG:
            for proj, fid_set in proj_dict.items():
                compute_slice_result(proj, fid_set)
                bar()
        else:
            with Pool() as p:
                for proj, fid_set in proj_dict.items():
                    p.apply_async(
                        compute_slice_result,
                        (proj, fid_set),
                        callback=lambda x: bar(),
                    )
                p.close()
                p.join()
    print(f"Done, used {time.perf_counter() - start:<.2f}s\n")
