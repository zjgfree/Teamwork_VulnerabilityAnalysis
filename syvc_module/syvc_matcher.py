import re
from data_module.db_access import *

#加一个节点筛选函数
def new_tp_matcher(node, node_dict, def_flag):
    obj = node_dict[node]
#    if obj["_label"] == "METHOD_PARAMETER_IN":
#        return "[" in obj["typeFullName"]
    return (
#        def_flag and
        obj["_label"] == "CALL"
        and obj["methodFullName"] == "<operator>.indirectIndexAccess"
#        and '[' in obj["code"]
    )

def fc_matcher(node, node_dict):
    obj = node_dict[node]
    return obj["_label"] == "CALL" and obj["name"] in fc_matcher.sensitive_func


fc_matcher.sensitive_func = load_from_pickle(f"./syvc_module/sensitive_func.db")

# 数组筛选
def au_matcher(node, node_dict, def_flag):
    obj = node_dict[node]
    if obj["_label"] == "METHOD_PARAMETER_IN":
        return "[" in obj["typeFullName"]
    return (
        def_flag
        and obj["_label"] == "CALL"
        and obj["methodFullName"] == "<operator>.indirectIndexAccess"
    )


# def pointer_matcher(node, node_dict, def_flag):
#     """指针越界"""
#     obj = node_dict[node]
#     return (
#         def_flag
#         and obj["_label"] == "CALL"
#         and obj["methodFullName"] == "<operator>.indirection"
#     )

def pointer_matcher(node, node_dict, def_flag):
    """指针越界"""
    obj = node_dict[node]
    if obj["_label"] == "METHOD_PARAMETER_IN":
        return "*" in obj["typeFullName"]
    return (
        def_flag
        and obj["_label"] == "IDENTIFIER"
        and obj["refto"] != "LOST"
        and "*" in node_dict[obj["refto"]]["code"]
    )


def integerOverflow(node, node_dict, ae_flag, ast):
    """整数溢出：原名ae_matcher"""
    obj = node_dict[node]
    return (
        not ae_flag
        and obj["_label"] == "CALL"
        and (
            obj["methodFullName"] in integerOverflow.ae_func_1
            or obj["methodFullName"] in integerOverflow.ae_func_2
            and len(
                [
                    v
                    for v in ast.get_sub_ast(node, node_dict, blk_flag=True)
                    if node_dict[v]["_label"] == "IDENTIFIER"
                ]
            )
            >= 2
        )
    )


integerOverflow.ae_func_1 = {
    "<operator>.multiplication",
    "<operator>.division",
    "<operator>.shiftLeft",
    "<operator>.assignmentMultiplication",
    "<operator>.assignmentDivision",
    "<operators>.assignmentShiftLeft",  # 后期名称可能改正
}

integerOverflow.ae_func_2 = {
    "<operator>.subtraction",
    "<operator>.addition",
    "<operator>.assignmentMinus",
    "<operator>.assignmentPlus",
}

def NPD_matcher(node, node_dict, def_flag):
    """CWE-476 NULL Pointer Dereference 空指针解引用"""
    obj = node_dict[node]
    return (
        obj["_label"] == "CALL"
        and obj["methodFullName"] == "<operator>.indirectFieldAccess"
        and "->" in obj["code"] # 如out->desc
        # 还应该增加：在前面是否对out进行过非空判断
    )

def pathTraversal_matcher(node, node_dict, def_flag):
    """CWE-22 路径函数：通过关键字匹配"""
    obj = node_dict[node]
    key_dict = [
        "open", "read", "mkdir", "append", "setPorperty"
    ]
    if obj["_label"] == "CALL":
        for key in key_dict:
            if key in obj["methodFullName"]:
                return True
    return False

def divideByZero_matcher(node, node_dict, def_flag):
    """CWE-369 divide-by-zero error"""
    obj = node_dict[node]
    key_dict = [
        "<operator>.division", "<operator>.modulo", "DIV", "alloc"
    ]
    if obj["_label"] == "CALL":
        for key in key_dict:
            if key in obj["methodFullName"]:
                return True
    return False

def assert_matcher(node, node_dict, def_flag):
    '''CWE-617 可达断言匹配, 通过关键字匹配'''
    obj = node_dict[node]
    key_dict = [
        "assert", "BUG", "OVS_NOT_REACHED", "validate_as_request"
    ]
    if obj["_label"] == "CALL":
        for key in key_dict:
            if key in obj["code"]:
                return True
    return False