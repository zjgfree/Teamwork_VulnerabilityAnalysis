import re
from data_module.db_access import *

#加一个节点筛选函数
def new_tp_matcher(node, node_dict, def_flag):
    obj = node_dict[node]
#    if obj["_label"] == "METHOD_PARAMETER_IN":
#        return "[" in obj["typeFullName"]
    return (
#        def_flag and
        obj["_label"] == "CALL"
        and obj["methodFullName"] == "<operator>.indirectIndexAccess"
#        and '[' in obj["code"]
    )

def fc_matcher(node, node_dict):
    obj = node_dict[node]
    return obj["_label"] == "CALL" and obj["name"] in fc_matcher.sensitive_func


fc_matcher.sensitive_func = load_from_pickle(f"./syvc_module/sensitive_func.db")

# 数组筛选
def au_matcher(node, node_dict, def_flag):
    obj = node_dict[node]
    if obj["_label"] == "METHOD_PARAMETER_IN":
        return "[" in obj["typeFullName"]
    return (
        def_flag
        and obj["_label"] == "CALL"
        and obj["methodFullName"] == "<operator>.indirectIndexAccess"
    )


def pu_matcher(node, node_dict, def_flag):
    obj = node_dict[node]
    if obj["_label"] == "METHOD_PARAMETER_IN":
        return "*" in obj["typeFullName"]
    return (
        def_flag
        and obj["_label"] == "IDENTIFIER"
        and obj["refto"] != "LOST"
        and "*" in node_dict[obj["refto"]]["code"]
    )


def ae_matcher(node, node_dict, ae_flag, ast):
    obj = node_dict[node]
    return (
        not ae_flag
        and obj["_label"] == "CALL"
        and (
            obj["methodFullName"] in ae_matcher.ae_func_1
            or obj["methodFullName"] in ae_matcher.ae_func_2
            and len(
                [
                    v
                    for v in ast.get_sub_ast(node, node_dict, blk_flag=True)
                    if node_dict[v]["_label"] == "IDENTIFIER"
                ]
            )
            >= 2
        )
    )


ae_matcher.ae_func_1 = {
    "<operator>.multiplication",
    "<operator>.division",
    "<operator>.shiftLeft",
    "<operator>.assignmentMultiplication",
    "<operator>.assignmentDivision",
    "<operators>.assignmentShiftLeft",  # 后期名称可能改正
}

ae_matcher.ae_func_2 = {
    "<operator>.subtraction",
    "<operator>.addition",
    "<operator>.assignmentMinus",
    "<operator>.assignmentPlus",
}


