import time
from alive_progress import alive_bar
from multiprocessing import Pool
from config import db_path
from config import PREPARE_DEBUG
from data_module.db_access import *
from .graph_class import *


def get_graph_dict(proj, fid_set):
    ast = load_from_pickle(f"{db_path}/{proj}/ast_edge_dict.db")
    cdg = load_from_pickle(f"{db_path}/{proj}/cdg_edge_dict.db")
    ddg = load_from_pickle(f"{db_path}/{proj}/ddg_edge_dict.db")
    node_dict = load_from_pickle(f"{db_path}/{proj}/node_dict.db")
    dump_to_pickle(
        {
            fid: GraphDB(proj, fid, ast[fid], cdg[fid], ddg[fid], node_dict)
            for fid in fid_set
        },
        f"{db_path}/{proj}/graph_dict.db",
    )
    dump_to_pickle(node_dict, f"{db_path}/{proj}/node_dict.db")

    if PREPARE_DEBUG:
        dump_to_json(node_dict, f"{db_path}/{proj}/node_dict_modified_astpatch.json")


def generate():
    start = time.perf_counter()
    print("Preparing for slicing...")
    proj_dict = load_from_pickle(f"{db_path}/proj_dict.db")
    with alive_bar(len(proj_dict)) as bar:
        bar.title = f"{'Preparing for slicing':^30}"
        if PREPARE_DEBUG:
            for proj, fid_set in proj_dict.items():
                get_graph_dict(proj, fid_set)
                bar()
        else:
            with Pool() as p:
                for proj, fid_set in proj_dict.items():
                    p.apply_async(
                        get_graph_dict,
                        (proj, fid_set),
                        callback=lambda x: bar(),
                    )
                p.close()
                p.join()
    print(f"Done, used {time.perf_counter() - start:<.2f}s\n")
