import time
import collections

from config import db_path, sr_path
from data_module.db_access import *
from .source_match import match_source


def extract_cv(proj):
    sink_cv_dict = load_from_pickle(f"{sr_path}/{proj}/sink_cv_tmp.db")
    print("???????????sink_cv: ", sink_cv_dict)
    newsink_dict = {}
    for tp, value_list in sink_cv_dict.items():
        if tp == 'ALL' or value_list == []:
            continue
        else:
            for value in value_list:
                sink_id = value[0]
                print("sink_id: ", sink_id)
                newsink_dict[sink_id] = {}
                newsink_dict[sink_id] = collections.defaultdict(str, newsink_dict[sink_id])
                newsink_dict[sink_id]["type"] = tp
                newsink_dict[sink_id]["code"] = value[2]
                newsink_dict[sink_id]["key_value"] = value[3]
    dump_to_pickle(newsink_dict, f"{sr_path}/{proj}/sink_cv_dict.db")
    # print("sink_cv: ", newsink_dict)
    # print("sink: ", [key 
    #                for key in newsink_dict.keys()])
    return newsink_dict



def extract_feature(proj, fid_set):
    node_dict = load_from_pickle(f"{db_path}/{proj}/node_dict.db")
    graph_dict = load_from_pickle(f"{db_path}/{proj}/graph_dict.db")
    slice_dict = load_from_pickle(f"{sr_path}/{proj}/all_slice_result_dict.db" )
    sink_dict = extract_cv(proj)
    print("sink_dict: ", list(sink_dict.keys()))
    for key in sink_dict.keys():
        print("type: ", type(key))
    print("=====================")


    # 需要将每个切片拆分出来，获取到对应切片的类型
    # feature_result = collections.defaultdict(int,feature_result)
    feature_result = {}
    
    for fid in fid_set:
        feature_result[fid] = {}
        feature_result[fid] = collections.defaultdict(int,feature_result[fid])
        for tp in ("FR","NPD","PT","DZ","AS","FC", "AU", "PU", "AE"):
            for src in graph_dict[fid].src_dict[tp]:  
                # 在切片db中获取到对应src的切片
                slice_result = [item[0] for item in slice_dict[fid][src][0]]
                print("src: ", src)
                print("slice_result: ",slice_result)
                
                # 匹配
                feature_result[fid][src] = {}
                feature_result[fid][src] = collections.defaultdict(str,feature_result[fid][src])
                feature_result[fid][src]["type"] = tp               
                feature_result[fid][src]["slice"] = slice_result
                # if int(src) not in list(sink_dict.keys()):
                #     feature_result[fid][src]["key_value"] = "-1"
                #     continue
                feature_result[fid][src]["key_value"] = sink_dict[src]["key_value"]
                feature_result[fid][src]["source"], feature_result[fid][src]["security_check"]= match_source(fid, node_dict, graph_dict, slice_result,sink_dict[src]["key_value"], tp)

                  
    dump_to_json(feature_result,f"{sr_path}/{proj}/feature_dict.json")


def feature():
    start = time.perf_counter()
    print("Extract slice feature... ")
    proj_dict = load_from_pickle(f"{db_path}/proj_dict.db")


    # 先不做多进程处理
    for proj,fid_set in proj_dict.items():
        extract_feature(proj, fid_set)