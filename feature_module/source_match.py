
from graph_module import graph_class

def cv_is_constant(node, node_dict, sub_ast, cv):
    # 关键变量由常数赋值
    if node_dict[node]['_label'] == "CALL" and node_dict[node]['name'] == "<operator>.assignment":
        if cv in node_dict[node]['code'].split("=")[0]:  
            for sub_node in sub_ast:
                if node_dict[sub_node]['_label'] == "LITERAL":
                    return True

    return False




def exchange_cv(node,node_dict, sub_ast,cv,only_cv):
    cv_list = []
    # 赋值语句："first = face->charmaps" cv是“first”，返回“ face->charmaps”
    if node_dict[node]['_label'] == "CALL" and node_dict[node]['name'] == "<operator>.assignment":
        code = node_dict[node]['code'].split("=")
        if cv in code[0]:
            print("assignment: ", node_dict[node]['code'])
            # 根据不同的赋值对象，获取转换后的关键变量
            
            # 赋值对象是普通变量
            if node_dict[sub_ast[2]]['_label'] == "IDENTIFIER" and node_dict[sub_ast[2]]['code'] not in only_cv:
                cv_list.append(node_dict[sub_ast[2]]['code']+":"+str(node_dict[sub_ast[2]]['lineNumber']))

            # 赋值对象是指针,加入“face->charmaps” 和“face”
            if node_dict[sub_ast[2]]['_label'] == "CALL" and node_dict[sub_ast[2]]['name'] =="<operator>.indirectFieldAccess" :
                if node_dict[sub_ast[2]]['code'] not in only_cv:
                    cv_list.append(node_dict[sub_ast[2]]['code']+":"+str(node_dict[sub_ast[2]]['lineNumber']))
                if(node_dict[sub_ast[3]]['_label'] == "IDENTIFIER") and node_dict[sub_ast[3]]['code'] not in only_cv:
                    cv_list.append(node_dict[sub_ast[3]]['code']+":"+str(node_dict[sub_ast[3]]['lineNumber']))

            # 赋值对象包含算数运算,加入所有的操作数
            if node_dict[sub_ast[2]]['_label'] == "CALL" and node_dict[sub_ast[2]]['name'] =="<operator>.addition" :
                cv_list.extend([node_dict[sub_node]['code']+":"+str(node_dict[sub_node]['lineNumber'])                           
                                    for sub_node in sub_ast[3:] if node_dict[sub_node]['_label'] == "IDENTIFIER" and  node_dict[sub_node]['code'] not in only_cv])
                
            # 赋值对象是函数，不转换cv，直接判断
                        

    # 控制语句，for循环，转换成上限
    #TODO 只考虑了“lessthan”
    if node_dict[node]['_label'] == "CASTForStatement":
        for sub_node in sub_ast:
            if node_dict[sub_node]['_label'] == "CALL" and node_dict[sub_node]['name'] == "<operator>.lessThan":
                cv_list.extend(node_dict[sub_node]['code'].split("<")[-1]+":"+str(node_dict[node]['lineNumber']))  

    
    return cv_list

            
def good_source_BOF(node, node_dict, sub_ast, cv):
    # malloc函数赋值的,关键变量是被赋值的变量
    if node_dict[node]['_label'] == "CALL" and node_dict[node]['name'] == "<operator>.assignment":
        if cv in node_dict[node]['code'].split("=")[0]:            
            for sub_node in sub_ast:
                if node_dict[sub_node]['_label']=="CALL" and "allc" in node_dict[sub_node]['name']: 
                    return True 
    return False   


def unkonw_source(node, node_dict, sub_ast, cv):
    # cv是函数参数
    # cv由函数参数赋值
    # 上述两种情况需要继续向上跟踪，如果cv转化成函数参数后，再没有任何赋值语句，则为unknow
    #TODO cv由自定义函数赋值
    if node_dict[node]['_label'] == "CALL" and node_dict[node]['name'] == "<operator>.assignment":
        if cv in node_dict[node]['code'].split("=")[0]:            
            for sub_node in sub_ast:
                if node_dict[sub_node]['_label']=="CALL" and node_dict[sub_node]['name']: 
                    return True 
        



# 在切片中根据sink点类型匹配是否存在对应的goodsource
# 从哪里获取关键变量？
# 变量转换语句如何进行变量转换函数
# 先匹配source点，再判断是否为good_source
# 通用的goodsource为常量
# 
def match_source(fid, 
                 node_dict, 
                 graph_dict, 
                 slice_result:list, 
                 cv_s, 
                 tp):
    # 从sink点向上遍历切片(直接从切片结果中倒序遍历就行)
    # 如何判断当前语句是否包含关键变量？子树中节点code一致
    # 判断当前切片节点是否为关键变量转化语句，如果是，转换关键变量
    # 并对获取到的新的关键变量，
    # 判断其是否为常数，如果是常数则为good_source
    # 如果是函数参数，则是unknow_source
    # 如果是自定义函数赋值，则是unknow_source
    # 判断当前语句是否为对应类型的good_source
    # 直到什么时候终止呢？匹配到good_source或者unknow_source,直到切片最上层
    slice_result.reverse()
    print("slice: ", slice_result)
    print("cv_s: ", cv_s)
    only_cv = set()
    cv_list = []
    # cv是数组类型
    for cv in cv_s:
        only_cv.add(cv)
        cv_list.append(cv+":"+str(node_dict[slice_result[0]]['lineNumber']))
    
    good_source = {}
    unknow_source = {}

    for cv_line in cv_list:
        new_cv = []
        line = cv_line.split(":")[1]
        cv = cv_line.split(":")[0]
        
        for node in slice_result:
            if node_dict[node]['lineNumber'] > int(line): 
                continue
            # obj = node_dict[node]
            # print("==========================")
            # # print("obj: ", obj)
            # # print("cv: ", cv)
            # # print("tp: ", tp)
            # print("==========================")
            sub_ast = graph_dict[fid].ast.get_sub_ast(node,node_dict)
            print("AST: ", sub_ast)
            # for tmp in sub_ast:
                # print("**************message: ", node_dict[tmp])   
            # 判断当前语句是不是关键变量转化语句,增加新的cv
            new_cv.extend(exchange_cv(node,node_dict, sub_ast,cv,only_cv))
            # 根据类型判断当前语句中关键变量对应的是否为good_source
            if tp in ["AU","PU","FC"]:
                if(good_source_BOF(node, node_dict, sub_ast, cv)):
                    good_source[node] = cv
                    break
            if(cv_is_constant(node, node_dict, sub_ast, cv)):
                good_source[node] = cv
                break

            # 判断当前语句中关键变量对应的是否为unknow_source
            if(unkonw_source(node, node_dict, sub_ast, cv)):
                unknow_source[node] = cv
                print("unkonw_node: ", node)
                break

        # cv没有任何新转化的cv，而且cv是函数参数，
        # 则为unknow_source，source点为函数头
        print("new_cv: ", new_cv)
        if new_cv == []:
            cv_tmp = "-1"
            if '->' in cv:
                cv_tmp = cv.split("->")[0]
            # 获取到函数参数列表
            sub_ast = graph_dict[fid].ast.get_sub_ast(fid,node_dict)
            for sub_node in sub_ast:
                # 判断关键变量是否在这个列表中
                if node_dict[sub_node]['_label'] == "METHOD_PARAMETER_IN":
                    if cv == node_dict[sub_node]['name'] or cv_tmp == node_dict[sub_node]['name']:
                        print("func parameter: ", cv)
                        unknow_source[fid] = cv
        cv_list.extend(new_cv)
    print("!!!!!good_source: ",good_source) 
    print("==================================")       
    print("!!!!!unknow_source: ",unknow_source) 
    source_dict = {}
    source_dict["good_source"] = good_source
    source_dict["unknow_source"] = unknow_source
    return source_dict    
        
        



        
        
